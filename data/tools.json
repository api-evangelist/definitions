[
	{
		"tool_id": "88",
		"name": "Apiary API Blueprint",
		"user": "",
		"details": "API Blueprint is lightweight documentation oriented domain specific language DSL for easily designing building and documenting REST APInbspAPI Blueprint is a MarkdownnbspIt is easy to learn and read perfect for comprehensive documentation but also for quick prototyping and collaboration",
		"post_date": "2013-06-12 18:45:41",
		"url": "https://github.com/apiaryio/api-blueprint",
		"glog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tools/apiary-io-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0
	},
	{
		"tool_id": "87",
		"name": "Apiary Blueprint Parser",
		"user": "",
		"details": "A JavaScript parser ofnbspApiary API blueprints Uses Nodejs then in browser include the browser version of the parser in your web page or application using the ltscriptgt tag To parse an API blueprint just call the parse method and pass the blueprint as a parameter The method will return an object representing the parsed blueprint or throw an exception if the input is invalid",
		"post_date": "2013-06-12 18:42:12",
		"url": "https://github.com/apiaryio/blueprint-parser",
		"glog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tools/apiary-io-logo.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0
	},
	{
		"tool_id": "69",
		"name": "I/O Docs",
		"user": "",
		"details": "IO Docs is a live interactive documentation system for RESTful web APIs By defining APIs at the resource method and parameter levels in a JSON schema IO Docs will generate a JavaScript client interface API calls can be executed from this interface which are then proxied through the IO Docs server with payload data cleanly formatted prettyprinted if JSON or XML",
		"post_date": "2013-02-02 20:12:13",
		"url": "https://github.com/mashery/iodocs",
		"glog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/io-docs-logo.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0
	},
	{
		"tool_id": "124",
		"name": "RESTful API Modeling Language",
		"user": "",
		"details": "RESTful API Modeling Language RAML is a simple and succinct way of describing practicallyRESTful APIs It encourages reuse enables discovery and patternsharing and aims for meritbased emergence of best practices The goal is to help our current API ecosystem by solving immediate problems and then encourage everbetter API patterns RAML is built on broadlyused standards such as YAML and JSON and is a nonproprietary vendorneutral open spec",
		"post_date": "2013-12-22 23:45:15",
		"url": "http://raml.org/",
		"glog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/raml-logo.jpg",
		"forks": 0,
		"followers": 0,
		"watchers": 0
	},
	{
		"tool_id": "74",
		"name": "Swagger Core",
		"user": "",
		"details": "Swagger is a specification and complete framework implementation for describing producing consuming and visualizing RESTful web services The overarching goal of Swagger is to enable client and documentation systems to update at the same pace as the servernbsp The documentation of methods parameters and models can be tightly integrated into the server code allowing APIs to always stay in sync",
		"post_date": "2013-04-26 21:34:03",
		"url": "https://github.com/wordnik/swagger-core/wiki",
		"glog_url": "",
		"blog_rss_url": "",
		"twitter_url": "",
		"github_url": "",
		"logo": "http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/tools/swagger-logo-green.png",
		"forks": 0,
		"followers": 0,
		"watchers": 0
	}
]